# Cadastro de Pessoas
 
‚Ä¶

## 1. Servidor - RESTFul api

‚Ä¶

### Pr√©-requisitos
 
> [Introdu√ß√£o Express/Node](https://developer.mozilla.org/pt-BR/docs/Learn/Server-side/Express_Nodejs/Introdu%C3%A7%C3%A3o): 
> caso tenha pouco conhecimento sobre NodeJs e Express, sugiro a leitura deste 
> artigo do site _MDN Web Docs_.

Aqui veremos o que √© necess√°rio para que seja poss√≠vel o desenvolvimento deste tutorial, caso n√£o tenha conhecimento pr√©vio dos itens listados abaixo √© extremamente indicado que leia sobre o assunto, por√©m n√£o √© necess√°rio que entenda o assunto a fundo cada um dos temas, √© apenas necess√°rio que saiba o b√°sico para a execu√ß√£o do tutorial:

- Conhecimento b√°sico de banco de dados:
  - DDL - Cria√ß√£o de tabelas
  - SQL
    - insert - inser√ß√£o de dados
    - update - altera√ß√£o de dados
    - select - busca e sele√ß√£o de dados 
    - delete - exclus√£o de dados
- Conhecimento b√°sico sobre o protocolo HTTP:
  - Fluxo de Comunica√ß√£o
  - C√≥digos de respostas
  - M√©todos de requisi√ß√£o
- REST e RESTFul:
  - Conceitos b√°sicos
- Programa√ß√£o B√°sica em Javascript e/ou Typescript
- Estrutura de arquivos JSON

Tamb√©m ser√° necess√°rio a instala√ß√£o dos softwares a seguir, certifique que todos estejam instalados e funcionando:

- [NodeJS e NPM](https://nodejs.org/)
  - √â poss√≠vel entender um pouco mais sobre o que √© o NodeJS [na p√°gina oficial _sobre_](https://nodejs.org/pt-br/about/), tamb√©m √© poss√≠vel entender um pouco mais sobre o NPM [na p√°gina oficial _sobre_](https://docs.npmjs.com/about-npm).
- [VSCode](https://code.visualstudio.com/)
  - Neste tutorial utilizaremos o VSCode como editor, √© poss√≠vel conhecer um pouco mais sobre o VSCode [na p√°gina oficial _sobre_](https://code.visualstudio.com/docs).
- [DB Browser for SQLite](https://sqlitebrowser.org/) - *ou outro cliente para SQLite*
  - Para testar e visualizar o banco de dados que criaremos no decorrer deste tutorial, utilizaremos o cliente de banco de dados SQLite _DB Browser for SQLite_, √© poss√≠vel conhecer mais sobre este cliente [na p√°gina oficial _sobre_](https://sqlitebrowser.org/about/).
 
### Estrutura do Projeto 
 
Para iniciarmos o desenvolvimento crie uma pasta vazia chamada `cadastro-pessoa` e dentro desta pasta crie uma subpasta chamada `server`, esta ser√° a pasta onde criaremos a API de nossa aplica√ß√£o, ap√≥s a cria√ß√£o abra a pasta `server` no VSCode (arraste a pasta `server` para dentro do VSCode).

A estrutura inicial do projeto deve ficar parecido com a seguir, note que a pasta que deve ser aberta no **VSCode** √© a `server` e n√£o a pasta `cadastro-pessoa`.
 
```shell
üóÅ cadastro-pessoa
 ‚îî‚ñπüóÄ server          <---arraste esta pasta para o VSCode
```
 
#### Comandos de terminal NPM e NPX
 
O NPM (Node Package Manager) √© respons√°vel por controlar os pacotes que ser√£o usados em nosso projeto, bem como o arquivo `package.json` que √© o arquivo onde as informa√ß√µes de projetos `NodeJS` s√£o mantidos.
 
J√° o NPX tem a premissa de executar comandos de terminal sem que sejam necess√°rios ter instalado a aplica√ß√£o (que executar√° o comando) localmente, em resumo o NPX baixa o pacote que deseja executar o comando no terminal e assim que a execu√ß√£o do comando termina ele apaga este pacote.
 
segue alguns exemplo de comandos e explica√ß√µes que utilizaremos em nosso projeto:
 
- npm init -y
  - _este comando √© respons√°vel por criar o arquivo `package.json`, o par√¢metro `-y` indica que a resposta para todas as eventuais perguntas durante a cria√ß√£o do arquivo ser√° respondida com `sim`, caso queira criar o arquivo `package.json` de maneira personalizada, remova este par√¢metro._
- npm install _nome_dos_pacotes_
  - _este comando √© respons√°vel por baixar pacotes a partir da base do NPM e salv√°-los na pasta `node_modules`, al√©m de baixar eventuais pacotes interdependentes dos que solicitamos instala√ß√£o, para controle destes pacotes extras √© criado um segundo arquivo `package-lock.json`._
  - _cada pacote baixado √© o adiciona √† lista de depend√™ncias do arquivo `package.json` assim como sua respectiva vers√£o, na chave `dependeces` do arquivo, caso seja adicionado o par√¢metro `--save-dev` estes pacotes s√£o adicionada na lista de depend√™ncias de desenvolvimento, o que significa que para a vers√£o de distribui√ß√£o estes pacotes n√£o s√£o necess√°rios, a chave para esta lista no arquivo `package.json` √© `devDependences`._
  - _O NPM √© capaz de recriar todas as depend√™ncias a partir do arquivo `package.json`, por isso em uma eventual distribui√ß√£o do projeto, n√£o √© necess√°rio o compartilhamento da pasta `node_modules` nem do arquivo `package-lock.json`, pois executando o comando `npm install` sem especificar nome de m√≥dulos, o node ir√° procurar no arquivo `package.json` todos os m√≥dulos a serem instalados, recriando assim a pasta `node_modules` e o arquivo `package-lock.json`._
- npm run _chave_do_script_
  - _este comando executa um dos comandos listados na chave `scripts` do arquivo `package.json`, vale ressaltar que `npm run` executa comandos no contexto local do `npm`, sendo poss√≠vel executar comandos de m√≥dulos que foram instalados localmente_.
- npx _nome_do_pacote_
  - _este comando ir√° baixar o pacote e execut√°-lo, assim que sua execu√ß√£o terminar o pacote √© exclu√≠do._
 
#### Inicializa√ß√£o do Projeto (arquivo package.json)
 
Para criarmos o arquivo `package.json` iremos utilizar o `NPM`, este arquivo √© respons√°vel por manter informa√ß√µes importantes sobre o projeto, como comandos para empacotamento e execu√ß√£o, quais pacotes de terceiro ser√£o utilizados, al√©m de nome do autor, vers√£o do projeto etc. abra o **terminal do VSCode** _ctrl+'_ e digite o seguinte comando:
 
```shell
npm init -y
```

Este comando criar√° um arquivo chamado `package.json` sem fazer nenhuma pergunta, para ter a possibilidade de criar o arquivo j√° com dados customizados, execute o mesmo comando por√©m sem o par√¢metro `-y` (este par√¢metro significa, responda _yes_ para todas perguntas).

O arquivo gerado ter√° uma estrutura semelhante a esta:

_package.json_
```json
{
  "name": "server",
  "version": "1.0.0",
  "description": "tutorial - desenvolvimento de uma API",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "Daniel de A. Varela",
  "license": "Apache-2.0"
}
```

Neste momento n√£o alteraremos o arquivo `package.json` gerado, mas logo mais o configuraremos com as especificidades de nosso projeto.
 
#### Instala√ß√£o de depend√™ncias para execu√ß√£o da aplica√ß√£o
 
Aqui instalaremos bibliotecas essenciais para a execu√ß√£o de nossa aplica√ß√£o, ou seja, sem elas nossa aplica√ß√£o n√£o pode ser executada, instalaremos o framework `Express`, que ser√° utilizado para manipula√ß√£o das requisi√ß√µes HTTP de nossa aplica√ß√£o, tamb√©m instalaremos a biblioteca `body-parser` para facilitar a leitura dos dados enviados no corpo de nossas requisi√ß√µes HTTP, para efetuar a instala√ß√£o dessas bibliotecas, abra o **terminal do VSCode** _ctrl+'_ e digite o seguinte comando:

```shell
npm install express body-parser
```

Para acesso e manipula√ß√£o do banco de dados utilizaremos duas bibliotecas, a primeira √© a `sqlite3`, que servir√° de _driver_ para conex√£o com o banco de dados, e para que seja poss√≠vel fazer requisi√ß√µes ass√≠ncronas ao banco utilizaremos a biblioteca `sqlite`. No **terminal do VSCode** _ctrl+'_ digite o seguinte comando para instalarmos estas bibliotecas:
 
```shell
npm install sqlite3 sqlite
```

Ap√≥s o t√©rmino da instala√ß√£o dos m√≥dulos √© poss√≠vel notar que o arquivo `package.json` foi acrescido com a seguinte entrada, isso descreve quais pacotes s√£o essenciais para a execu√ß√£o da aplica√ß√£o que estamos desenvolvendo:

_package.json_
```json
{
  ‚Ä¶
  "dependencies": {
    "body-parser": "*",
    "express": "*",
    "body-parser": "*",
    "sqlite": "*",
    "sqlite3": "*"
  }
  ‚Ä¶
}
```

> Abaixo temos uma vers√£o do arquivo `package.json` mostrando as chaves que foram adicionadas, note que esta √© uma representa√ß√£o parcial do arquivo, `‚Ä¶` representa a parte removida na representa√ß√£o.

#### Instala√ß√£o de depend√™ncias para desenvolvimento da aplica√ß√£o
 
Aqui instalaremos as bibliotecas necess√°rias para o desenvolvimento da aplica√ß√£o, estas n√£o precisam fazer parte da _vers√£o de produ√ß√£o_ do sistema, note que adicionamos o par√¢metro `--save-dev` no comando de instala√ß√£o, isto se d√° justamente para informar que estas bibliotecas s√£o necess√°rias somente para o desenvolvimento.
 
Instalaremos a biblioteca `typescript` para que possamos compilar a _vers√£o de produ√ß√£o_, esta biblioteca ser√° respons√°vel por converter os arquivos `.ts` para arquivos `.js` al√©m de criar arquivos `.js.map` para que seja poss√≠vel vincular eventuais erros ocorridos durante a execu√ß√£o dos arquivos `.js` com os c√≥digos dos arquivos `.ts`. 

Instalaremos tamb√©m a biblioteca `ts-node`, esta nos permitir√° executar a aplica√ß√£o sem que seja necess√°rio a cria√ß√£o dos arquivos `.js` e `.js.map`, isso poupar√° tempo durante o desenvolvimento.

```shell
npm install --save-dev typescript ts-node
```

Outra biblioteca importante para o desenvolvimento √© a `@types/express`, como o desenvolvimento desta aplica√ß√£o √© baseada em **TypeScript** as bibliotecas essencialmente desenvolvidas em **Javascript** n√£o possuem tipos e nota√ß√£o de objetos, classes etc, ent√£o arquivos de tipos s√£o necess√°rios para que o **VSCode** consiga _autocompletar_, para a instal√ß√£o desta biblioteca digite o seguinte comando no **terminal do VSCode** _ctrl+'_:

```shell
npm install --save-dev @types/express
```

Ap√≥s a instala√ß√£o dos m√≥dulos √© poss√≠vel notar que o arquivo `package.json` foi acrescido com a seguinte entrada, isso descreve quais pacotes s√£o essenciais para o desenvolvimento da aplica√ß√£o:

_packaje.json_
```json
{
  ‚Ä¶
  "devDependencies": {
    "@types/express": "*",
    "ts-node": "*",
    "typescript": "*"
  }
  ‚Ä¶
}
```

> Abaixo temos uma vers√£o do arquivo `package.json` mostrando as chaves que foram adicionadas, note que esta √© uma representa√ß√£o parcial do arquivo, `‚Ä¶` representa a parte removida na representa√ß√£o.

#### Cria√ß√£o do arquivo de configura√ß√£o do compilador TypeScript (arquivo tsconfig.json)
 
Para que seja poss√≠vel informar ao `typescript` e ao `ts-node` como compilar e/ou interpretar os arquivos `.ts` √© necess√°rio a cria√ß√£o de um arquivo `tsconfig.json`; A fim de facilitar este passo, utilizaremos o **NPX**, no **terminal do VSCode** digite o seguinte comando:  
 
```shell
npx typescript --init
```

Neste momento n√£o alteraremos o arquivo `tsconfig.json` gerado, mas logo mais o configuraremos com as especificidades de nosso projeto.
 
#### Cria√ß√£o manual de pastas e arquivos
 
Al√©m de todos os arquivos gerados automaticamente ser√° necess√°rio criar pastas e arquivos manualmente, ent√£o dentro da estrutura atual de nosso projeto adicione os arquivos e pastas listado abaixo:
 
```shell
üóÅ server
‚îú‚ñπüóÄ dist             <---pasta onde os arquivo compilados ser√£o armazenados
‚îî‚ñπüóÅ src              <---pasta com os c√≥digos fontes
  ‚îú‚ñπüóé main.ts         <---arquivo de entrada da aplica√ß√£o
  ‚îî‚ñπüóé database.ts     <---arquivo respons√°vel pela conex√£o com o banco de dados

```

Nesta estrutura o √∫nico item opcional √© a pasta `./dist`, pois a mesma ser√° criada automaticamente quando utilizarmos o `typescript` para compilar os arquivos `.ts`.
 
#### Conclus√£o (estrutura)
 
Ao t√©rmino desse processo, nossa estrutura de arquivos deve ser parecida com a abaixo apresentada, note que a pasta `node_module` e `dist` est√£o fechadas, n√£o sendo assim listadas na representa√ß√£o abaixo: 
 
```shell
üóÅ server
‚îúüóÄ dist
‚îúüóÄ node_module
‚îúüóÅ src
‚îÇ ‚îú‚ñπüóé database.ts
‚îÇ ‚îî‚ñπüóé main.ts
‚îú‚ñπüóé openapi.yaml
‚îú‚ñπüóé package-lock.json
‚îú‚ñπüóé package.json
‚îî‚ñπüóé tsconfig.json
```
 
### Preparando para compila√ß√£o e execu√ß√£o
 
Neste t√≥pico alteraremos os arquivos de configura√ß√£o para que se _encaixe_ nas necessidades espec√≠ficas de nosso projeto. 
 
#### TypeScript (tsconfig.json)

Iniciaremos configurando o arquivo `tsconfig.json`, este arquivo como dito anteriormente, tem a responsabilidade de configurar como o `typescript` e `ts-node` ir√° interpretar e/ou executar os arquivos `.ts`, segue as chaves que devem ser alteradas com as devidas descri√ß√µes de motivo de altera√ß√£o:

- `target` - alterar para `ES2020`
  - _aqui definimos que os arquivos `.js` gerados devem ser feitos para a vers√£o `ES20202` do `Javascript`_.
- `sourceMap` - descomentar e definir o valor como `true`
  - _aqui informamos que o typescript deve gerar arquivos `.js.map`, para que seja poss√≠vel rastrear os erros ocorridos nos arquivos `.js` nos arquivos `.ts`_
- `outDir` - descomentar e definir o valor para `./dis`
  - _aqui definimos que ao compilar os arquivos `.ts`, os mesmos devem ser salvos na pasta `./dist` (esta ser√° a pasta que cont√©m os arquivos da aplica√ß√£o que ser√£o distribu√≠dos como vers√£o produ√ß√£o)_.

_tsconfig.json_
```json
{
  "compilerOptions": {
    "target": "ES2020",    <---alterado
    "module": "commonjs",
    "sourceMap": true,     <---alterado
    "outDir": "./dist",    <---alterado
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  }
}
```

> Abaixo temos uma vers√£o do arquivo `tsconfig.json` mostrando as chaves que foram alteradas, note que os coment√°rios foram removidos e que o texto `<---alterado` √© somente para demonstrar onde foram feitas as altera√ß√µes e n√£o devem estar presentes no arquivo real. 


#### Scripts de testes e Execu√ß√µes (package.json)

Para que seja poss√≠vel executar e testar a aplica√ß√£o em desenvolvimento, criaremos dois scripts no arquivo `package.json`, dentro da chave `scripts` adicionaremos a entrada `"build": "tsc"`, este comando √© respons√°vel por iniciar o processo de compila√ß√£o do `typescript`, a segunda entrada que deve ser adicionada √© a seguinte `"debug": "ts-node-script src/main.ts"`, este comando ser√° respons√°vel por executar nosso projeto no momento de desenvolvimento e testes. 
 
_packaje.json_
```json
{
  ‚Ä¶
  "scripts": {
    "build": "tsc",                                        <---adicionado
    "debug": "ts-node-script src/main.ts",                 <---adicionado
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  ‚Ä¶
}
```

> Abaixo temos uma vers√£o do arquivo `package.json` mostrando as chaves que foram adicionadas, note que esta √© uma representa√ß√£o parcial do arquivo, `‚Ä¶` representa a parte removida na representa√ß√£o, note tamb√©m e que o texto `<---adicionado` √© somente para demonstrar onde foram feitas as altera√ß√µes e n√£o devem estar presentes no arquivo real. 

No t√≥pico seguinte ser√° demonstrado com executar esses scripts.
 
### Teste da estrutura do projeto
 
Para que possamos testar os `scripts` e configura√ß√µes que fizemos no passo anterior, teremos que atualizar o arquivo `src/main.ts`, adicionaremos `console.log("Ol√° mundo!");` no in√≠cio do arquivo, salvaremos para que possamos executar o comando de teste.
 
_src/main.ts_
```typescript
console.log("Ol√° mundo!");
```
 
Agora podemos executar o comando de testes, abra o **terminal do VSCode** _ctrl+'_ e execute o seguinte comando:
 
```shell
npm run debug
```
 
Se tudo estiver _ok_ voc√™ deve ver o seguinte resultado no terminal:
 
```
> server@1.0.0 debug C:\cadastro-de-pessoa\server
> ts-node-script src/main.ts
 
Ol√° mundo!
```
 
Podemos testar se a compila√ß√£o para a vers√£o final est√° ocorrendo sem problemas para isso, abra o **terminal do VSCode** _ctrl+'_ e execute:
 
```shell
npm run build
```
 
Se tudo estiver _ok_ voc√™ deve ver os arquivos criados na pasta `./dist`, para verificar se a compila√ß√£o foi bem sucedida execute o seguinte comando:
 
```shell
node dist/main.js
```
 
Se estiver tudo _ok_ voc√™ ver√° a mensagem `Ol√° mundo!` no terminal.

### Criando rotas de acesso ao Servidor 

Criaremos neste momento a capacidade do nosso servidor a responder requisi√ß√µes HTTP, mais espec√≠ficamente criaremos duas rotas de acesso sendo a primeira, `/pessoa`, `GET` e `POST`, e a segunda rota ser√° `/pessoa/:id` que responder√° os m√©todos HTTP `GET`, `PUT` e `DELETE`.

Segue descri√ß√£o de quais s√£o as atribui√ß√µes de cada uma dessas rotas assim que fizermos conex√£o com o banco de dados:

- /pessoa
  - `GET` - respons√°vel por listar todos os dados de todas as pessoas no banco de dados.
  - `POST` - respons√°vel por criar um nova pessoa no banco de dados.
- /pessoa/:id
  - `GET` - respons√°vel por listar somente os dados de uma pessoa espec√≠fica, encontrada pelo valor contido em `:id`.
  - `PUT` - respons√°vel por atualizar os dados de uma pessoa espec√≠fica, encontrada pelo valor contido em `:id`.
  - `DELETE` - respons√°vel por excluir somente os dados de uma pessoa espec√≠fica, encontrada pelo valor contido em `:id`.

Criaremos neste momento a capacidade do nosso servidor a responder requisi√ß√µes HTTP, mais espec√≠ficamente criaremos duas rotas de acesso sendo a primeira, `/pessoa`, `GET` e `POST`, e a segunda rota ser√° `/pessoa/:id` que responder√° os m√©todos HTTP `GET`, `PUT` e `DELETE`.
 
Segue descri√ß√£o de quais s√£o as atribui√ß√µes de cada uma dessas rotas assim que fizermos conex√£o com o banco de dados:
 
- /pessoa
  - `GET` - respons√°vel por listar todos os dados de todas as pessoas no banco de dados.
  - `POST` - respons√°vel por criar uma nova pessoa no banco de dados.
- /pessoa/:id
  - `GET` - respons√°vel por listar somente os dados de uma pessoa espec√≠fica, encontrada pelo valor contido em `:id`.
  - `PUT` - respons√°vel por atualizar os dados de uma pessoa espec√≠fica, encontrada pelo valor contido em `:id`.
  - `DELETE` - respons√°vel por excluir somente os dados de uma pessoa espec√≠fica, encontrada pelo valor contido em `:id`.
 
O arquivo a seguir ainda n√£o √© capaz de comunicar-se com o banco de dados, mas nos permitir√° testar se o servidor √© capaz de responder as requisi√ß√µes HTTP que o cliente far√°, o arquivo est√° comentado linha-a-linha para que seja poss√≠vel compreender seu funcionamento, nos pr√≥ximos passos daremos a capacidade de nosso servidor comunicar-se com o banco de dados, assim efetivamente criando, alterando, listando e excluindo informa√ß√µes em nossa base de dados.
 
Abra o arquivo `src/main.ts` e substitua seu conte√∫do pelo seguinte:

_src/main.ts_
```typescript
//
// IMPORTA A BIBLIOTECA EXPRESS PARA CONTROLE DE REQUISE√á√ÉO HTTP.
//

import express from "express";

//
// IMPORTA A BIBLIOTECA BODY-PARSER PARA FACILITAR A LEITURA DO CORPO HTTP  DA 
// REQUISI√á√ÉO RECEBIDA PELO CLIENTE.
//

import bodyParser from "body-parser";

//
// CRIA OBJETO QUE IR√Å CONTROLAR AS REQUISI√á√ïES HTTP DA APLICA√á√ÉO.
//

const app = express();

//
// ADICIONA AO CABE√áALHO DE TODAS AS RESPOSTAS DAS REQUISI√á√ïES HTTP, INFORMA√á√ïES 
// QUE PERMITEM O ACESSO POR QUALQUER ORIGEM AOS M√âTODOS [GET,PUT,POST,DELETE].
//

// adiciona fun√ß√£o a ser executada antes de qualquer requisi√ß√£o HTTP.
app.use(
    // fun√ß√£o que ser√° executada antes da fun√ß√£o de qualquer fun√ß√£o definida 
    // para a `rota` e `m√©todo HTTP` que atualmente esta sendo requisitada.
    function (request, response, next) {
        // define no cabe√ßalho de resposta que as requisi√ß√µes podem ser feitas 
        // a partir de qualquer dom√≠nio (*).
        response.header('Access-Control-Allow-Origin', '*');
        // define no cabe√ßalho de resposta que os m√©todos GET, PUT, POST, DELETE
        // s√£o permitidos.
        response.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
        // define no cabe√ßalho de resposta que √© permitido a chave Content-Type 
        // no cabe√ßalho de requisi√ß√£o.
        response.header('Access-Control-Allow-Headers', 'Content-Type');
        // segue o fluxo para execu√ß√£o.
        next();
    }
);

//
// INICIA A TRADU√á√ÉO DO CORPO HTTP RECEBIDO PELO CLIENTE EM QUAISQUER UMA DAS 
// REQUISI√á√ïES.
//

// adiciona fun√ß√£o de `tratamento` do corpo da requisi√ß√£o HTTP recebida para que 
// seja executada antes de qualquer fun√ß√£o definida para a `rota`  e `m√©todo 
// HTTP` atual.
app.use(bodyParser.json());

//
// RESPONDE SOLICITA√á√ÉO DO CLIENTE: LISTAGEM DE DADOS DE TODAS AS PESSOAS.
//

// espera requisi√ß√µes `GET` na rota `/pessoa`
app.get('/pessoa',
    // Fun√ß√£o que o servidor executar√° quando receber a requisi√ß√£o nesta rota: 
    // - o par√¢metro `request` √© um objeto que nos ajuda a entender os dados 
    //   contidos nas requisi√ß√µes HTTP
    // - o par√¢metro `response`  √© um objeto que nos ajuda a responder as 
    //   requisi√ß√µes HTTP
    function (request, response) {
        // cria o objeto que utilizaremos para responder a requisi√ß√£o HTTP, 
        // enviaremos os dados contidos neste objeto no corpo da resposta HTTP 
        // para que seja poss√≠vel verifica se o servidor est√° recebendo as 
        // requisi√ß√µes corretamente, bem como se est√° respondendo corretamente.
        const responseData = {
            // adiciona a chave `teste` ao objeto para verificar se o servidor 
            // consegue responder corretamente as esta requisi√ß√£o.
            teste: "buscar dados de todas as pessoas pessoas"
        };
        // responde para o cliente em formato JSON o objeto criado anteriormente.
        response.json(responseData);
    }
);

//
// RESPONDE SOLICITA√á√ÉO DO CIENTE: INSER√á√ÉO DE NOVA PESSOA.
//

// espera requisi√ß√µes `POST` na rota `/pessoa`.
app.post('/pessoa',
    // Fun√ß√£o que o servidor executar√° quando receber a requisi√ß√£o nesta rota: 
    // - o par√¢metro `request` √© um objeto que nos ajuda a entender os dados 
    //   contidos nas requisi√ß√µes HTTP
    // - o par√¢metro `response`  √© um objeto que nos ajuda a responder as 
    //   requisi√ß√µes HTTP
    function (request, response) {
        // cria o objeto que utilizaremos para responder a requisi√ß√£o HTTP, 
        // enviaremos os dados contidos neste objeto no corpo da resposta HTTP 
        // para que seja poss√≠vel verifica se o servidor est√° recebendo as 
        // requisi√ß√µes corretamente, bem como se est√° respondendo corretamente.
        const responseData = {
            // adiciona a chave `teste` ao objeto para verificar se o servidor 
            // consegue responder corretamente as esta requisi√ß√£o.
            teste: "adicionar dados de pessoa no banco de dados",
            // adiciona a chave `vindoDoCliente` ao objeto para que o servidor 
            // responda o que recebeu no corpo da requisi√ß√£o HTTP, para que 
            // assim seja poss√≠vel verificar-mos se o servidor est√° recebendo os 
            // dados corretamente.
            vindoDoCliente: request.body
        };
        // responde para o cliente em formato JSON o objeto criado anteriormente.
        response.json(responseData);
    }
);

//
// RESPONDE SOLICITA√á√ÉO DO CIENTE: LISTAGEN DE DADOS DE UMA PESSOA ESPEC√çFICA.
//

// espera requisi√ß√µes `GET` na rota `/pessoa/:id`.
app.get('/pessoa/:id',
    // Fun√ß√£o que o servidor executar√° quando receber a requisi√ß√£o nesta rota: 
    // - o par√¢metro `request` √© um objeto que nos ajuda a entender os dados 
    //   contidos nas requisi√ß√µes HTTP
    // - o par√¢metro `response`  √© um objeto que nos ajuda a responder as 
    //   requisi√ß√µes HTTP
    function (request, response) {
        // cria o objeto que utilizaremos para responder a requisi√ß√£o HTTP, 
        // enviaremos os dados contidos neste objeto no corpo da resposta HTTP 
        // para que seja poss√≠vel verifica se o servidor est√° recebendo as 
        // requisi√ß√µes corretamente, bem como se est√° respondendo corretamente.
        const responseData = {
            // adiciona a chave id ao objeto para que seja poss√≠vel verifica se 
            // o servidor est√° recebendo corretamente a chave `:id` pela rota 
            // atual.
            id: request.params.id,
            // adiciona a chave `teste` ao objeto para verificar se o 
            // servidor consegue responder corretamente as esta requisi√ß√£o.
            teste: "buscar dados de uma pessoa espec√≠fica"
        };
        // responde para o cliente em formato JSONo objeto criado anteriormente.
        response.json(responseData);
    }
);

//
// RESPONDE SOLICITA√á√ÉO DO CIENTE: ALTERA√á√ÇO DE DADOS DE UMA PESSOA ESPEC√çFICA.
//

// espera requisi√ß√µes `PUT` na rota `/pessoa/:id`.
app.put('/pessoa/:id',
    // Fun√ß√£o que o servidor executar√° quando receber a requisi√ß√£o nesta rota: 
    // - o par√¢metro `request` √© um objeto que nos ajuda a entender os dados 
    //   contidos nas requisi√ß√µes HTTP
    // - o par√¢metro `response`  √© um objeto que nos ajuda a responder as 
    //   requisi√ß√µes HTTP
    function (request, response) {
        // cria o objeto que utilizaremos para responder a requisi√ß√£o HTTP, 
        // enviaremos os dados contidos neste objeto no corpo da resposta HTTP 
        // para que seja poss√≠vel verifica se o servidor est√° recebendo as 
        // requisi√ß√µes corretamente, bem como se est√° respondendo corretamente.
        const responseData = {
            // adiciona a chave id ao objeto para que seja poss√≠vel verifica se 
            // o servidor est√° recebendo corretamente a chave `:id` pela rota 
            // atual.
            id: request.params.id,
            // adiciona a chave `teste` ao objeto para verificar se o servidor 
            // consegue responder corretamente as esta requisi√ß√£o.
            teste: "atualiza dados de uma pessoa espec√≠fica",
            // adiciona a chave `vindoDoCliente` ao objeto para que o servidor 
            // responda o que recebeu no corpo da requisi√ß√£o HTTP, para que 
            // assim seja poss√≠vel verificar-mos se o servidor est√° recebendo os 
            // dados corretamente.
            vindoDoCliente: request.body
        };
        // responde para o cliente em formato JSON o objeto criado anteriormente.
        response.json(responseData);
    }
);

//
// RESPONDE SOLICITA√á√ÉO DO CIENTE: EXCLUIS√ÉO DE DADIS DE UMA PESSOA ESPEC√çFICA.
//

// espera requisi√ß√µes `DELETE` na rota `/pessoa/:id`.
app.delete('/pessoa/:id',
    // Fun√ß√£o que o servidor executar√° quando receber a requisi√ß√£o nesta rota: 
    // - o par√¢metro `request` √© um objeto que nos ajuda a entender os dados 
    //   contidos nas requisi√ß√µes HTTP
    // - o par√¢metro `response`  √© um objeto que nos ajuda a responder as 
    //   requisi√ß√µes HTTP
    function (request, response) {
        // cria o objeto que utilizaremos para responder a requisi√ß√£o HTTP, 
        // enviaremos os dados contidos neste objeto no corpo da resposta HTTP 
        // para que seja poss√≠vel verifica se o servidor est√° recebendo as 
        // requisi√ß√µes corretamente, bem como se est√° respondendo corretamente.
        const responseData = {
            // adiciona a chave id ao objeto para que seja poss√≠vel verifica se 
            // o servidor est√° recebendo corretamente a chave `:id` pela rota 
            // atual.
            id: request.params.id,
            // adiciona a chave `teste` ao objeto para verificar se o servidor 
            // consegue responder corretamente as esta requisi√ß√£o.
            teste: "exclui dados de uma pessoa espec√≠fica",
        };
        // responde para o cliente em formato JSON o objeto criado anteriormente.
        response.json(responseData);
    }
);

//
// INICIA ESPERA DE REQUISI√á√ÉO NA PORTA 8081 E IMPRIME A MENSAGEM `running...` 
// NO TERMINAL.
//

app.listen(8081, () => console.log("running..."));
```

#### Testando as requisi√ß√µes HTTP

‚Ä¶

#### Arquivo para teste do servidor
 
Ser√° necess√°rio criar artif√≠cios para que possamos testar o que fizemos at√© o momento, existem muitas alternativas para que nossos testes de requisi√ß√£o possam ser realizados, existem aplica√ß√µes como o `Insomnia.rest` e `Postman` que s√£o desenvolvidos para isso, bem como temos o `OpenApi/Swagger` que tamb√©m pode auxiliar nesta tarefa, por√©m nossa abordagem consistir√° em desenvolver uma pequena p√°gina com HTML e Javascript, neste momento n√£o entraremos nos detalhes de como esta funciona, pois utilizaremos ela novamente no desenvolvimento da `aplica√ß√£o cliente`, ai sim detalharemos o funcionamento de cada uma das fun√ß√µes que desenvolvemos aqui.
 
Crie um arquivo chamado `teste-api.html` (de prefer√™ncia fora da estrutura do projeto) e adicione o seguinte c√≥digo:

_teste-api.html_
```html
<html>
  <head>
      <title>Teste API</title>
  </head>
  <body>
      Abra o console do browser para executar os testes:
      <pre>
        await buscarPessoas();
        await adicionarPessoa({nome: "Daniel", sobrenome: "de Andrade Varela", apelido: "Varela"});
        await buscarPessoa(43);
        await alterarPessoa(43, {nome: "Daniel", sobrenome: "de Andrade Varela", apelido: "Varela"});
        await excluirPessoa(43);
      </pre>
      <script>
          // ENDERE√áO LOCAL ONDE A API SER√Å EXECUTADA.
          const host = "http://localhost:8081";

          // SOLICITA AO SERVIDOR: LISTAGEM DE DADOS DE TODAS AS PESSOAS.
          async function buscarPessoas() {
              const configReq = { method: "get" };
              const req = await fetch(host+"/pessoa")
              const res = await req.json();
              return res;
          }

          // SOLICITA AO SERVIDOR: INSER√á√ÉO DE NOVA PESSOA.
          async function adicionarPessoa(dadosDePessoa) {
              const configReq = {
                  method: "post",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify(dadosDePessoa)
              };
              const req = await fetch(host+"/pessoa", configReq);
              const res = await req.json();
              return res;
          }

          // SOLICITA AO SERVIDOR: LISTAGEN DE DADOS DE UMA PESSOA ESPEC√çFICA.
          async function buscarPessoa(id) {
              const configReq = { method: "get" };
              const req = await fetch(host + "/pessoa/" + id)
              const res = await req.json();
              return res;
          }

          // SOLICITA AO SERVIDOR: ALTERA√á√ÇO DE DADOS DE UMA PESSOA ESPEC√çFICA.
          async function alterarPessoa(id, dadosDePessoa) {
              const configReq = {
                  method: "put",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify(dadosDePessoa)
              };
              const req = await fetch(host + "/pessoa/" + id, configReq);
              const res = await req.json();
              return res;
          }

          // SOLICITA AO SERVIDOR: EXCLUIS√ÉO DE DADIS DE UMA PESSOA ESPEC√çFICA.
          async function excluirPessoa(id) {
              const configReq = { method: "delete" };
              const req = await fetch(host + "/pessoa/" + id, configReq);
              const res = await req.json();
              return res;
          }
      </script>
  </body>
</html>
```

#### Executando os testes

Para que possamos executar os testes em nosso servidor √© necess√°rio inici√°-lo, no **terminal do VSCode** _ctrl+'_ digite o seguinte comando `npm run debug`, se tudo estiver _ok_ voc√™ ver√° a mensagem `running...` em seu terminal.

Agora abra o arquivo `teste-api.html` que criamos no passo anterior em seu _browser_ preferido.

##### Testar a rota `GET /pessoa` - _listar todas as pessoas_

Execute o seguinte comando no console do seu browser com a p√°gina `teste-api.html` aberta:

```javascript
await buscarPessoas();
```

O resultado deve ser o seguinte:

```javascript
{teste: "buscar dados de todas as pessoas pessoas"}
```

##### Testar a rota `POST /pessoa` - _adicionar uma pessoa_

Execute o seguinte comando no console do seu browser com a p√°gina `teste-api.html` aberta:

```javascript
await adicionarPessoa({nome: "Daniel", sobrenome: "de Andrade Varela", apelido: "Varela"});
```

O resultado deve ser o seguinte:

```javascript
{teste: "adicionar dados de pessoa no banco de dados", vindoDoCliente: {‚Ä¶}}
```

> note que  `vindoDoCliente> {...}` √© exatamente o que foi enviado para o servidor, para poder ler o retorno clique em `{...}`.

##### Testar a rota `GET /pessoa/:id` - _listar informa√ß√µes de uma pessoa espec√≠fica_

Execute o seguinte comando no console do seu browser com a p√°gina `teste-api.html` aberta:

```javascript
await buscarPessoa(43);
```

O resultado deve ser o seguinte:

```javascript
{id: "43", teste: "buscar dados de uma pessoa espec√≠fica"}
```

> note que o valor da chave `id` √© exatamente o que foi enviado para o servidor.

##### Testar a rota `PUT /pessoa/:id` - _adicionar uma pessoa_

Execute o seguinte comando no console do seu browser com a p√°gina `teste-api.html` aberta:

```javascript
await alterarPessoa(43, {nome: "Daniel", sobrenome: "de Andrade Varela", apelido: "Varela"});
```

O resultado deve ser o seguinte:

```javascript
{id: "43", teste: "atualiza dados de uma pessoa espec√≠fica", vindoDoCliente: {‚Ä¶}}
```
> note que o valor da chave `id` √© exatamente o que foi enviado para o servidor.

> note que  `vindoDoCliente> {...}` √© exatamente o que foi enviado para o servidor, para poder ler o retorno clique em `{...}`.

##### Testar a rota `DELETE /pessoa/:id` - _listar informa√ß√£o de uma pessoa espec√≠fica_

Execute o seguinte comando no console do seu browser com a p√°gina `teste-api.html` aberta:

```javascript
await excluirPessoa(43);
```

O resultado deve ser o seguinte:

```javascript
{id: "43", teste: "exclui dados de uma pessoa espec√≠fica"}
```

> note que o valor da chave `id` √© exatamente o que foi enviado para o servidor.

#### ZZZZZ [‚Ä¶]

√â poss√≠vel notar que o `browser` (aqui agindo como cliente), est√° fazendo requisi√ß√µes ao servidor que desenvolvemos, note que as respostas s√£o consequ√™ncia das constantes `responseData` que criamos no arquivo `src/main.ts`, dentro de cada uma das rotas, e que nas rotas `POST /pessoa` e `PUT /pessoa/:id` o cliente envia informa√ß√µes pelo corpo da requisi√ß√£o HTTP e o servidor as devolve no corpo da resposta HTTP, mais especificamente dentro da chave `vindoDoCliente`; al√©m disso √© poss√≠vel notar que nas rotas `GET /pessoa/:id`, `PUT /pessoa/:id` e `DELETE /pessoa/:id`, o valor `:id` recebido na rota (pela `URL`) √© adicionado na chave `id` da resposta do servidor, em resumo podemos notar que √© poss√≠vel enviar informa√ß√µes tanto pela `URL` da requisi√ß√£o HTTP como pelo corpo da requisi√ß√£o, por√©m o corpo √© utilizado em m√©todos `POST` e `PUT` ou seja, m√©todos que de fato necessitam enviar informa√ß√µes mais complexas para que o servidor execute alguma a√ß√£o espec√≠fica.

> **`DICA`**: Altere os valores das vari√°veis, tanto das requisi√ß√µes como no arquivo `src/main.ts` para testar e buscar um melhor entendimento de como as `requisi√ß√µes` e `resposta` funcionam em nosso projeto.

### Cria√ß√£o do banco de Dados
 
‚Ä¶
 
_src/database.ts_
```typescript
// IMPORTA O DRIVE DE CONEX√ÉO DA BIBLIOTECA SQLITE3.
import { Database } from 'sqlite3';
 
// IMPORTA O M√âTODO `OPEN` DA BIBLIOTECA SQLITE, ESTA BIBLIOTECA NOS PERMITE
// TRABALHAR COM BANCOS SQLITE DE MANEIRA ASS√çNCRONA.
import { open } from 'sqlite';
 
// CRIA UMA FUN√á√ÉO ASS√çNCRONA CHAMADA INIT() E A EXPORTA PARA QUE SEJA POSS√çVEL 
// UTILIZ√Å-LA FORA DESTE M√ìDULO.
export async function init() {
    // AGUARDA QUE A FUN√á√ÉO `OPEN`SEJA EXECUTADA, ONDE SER√Å CRIADO O ARQUIVO DE 
    // BANCO DE DADOS `SRV/DATABASE.DB` E RETORNAR√Å O OBJETO DE CONEX√ÉO QUE
    // NOS PERMITIR√Å MANIPULAR O BANCO DE DADOS.
    const db = await open({
        filename: './database.db',
        driver: Database,
    });
 
    // CRIA A TABELA PESSOA CASO ELA N√ÉO EXISTA.
    await db.exec(`
        CREATE TABLE IF NOT EXISTS pessoa (
            id        INTEGER PRIMARY KEY AUTOINCREMENT,
            nome      TEXT NOT NULL,
            sobrenome TEXT NOT NULL,
            apelido   TEXT NOT NULL UNIQUE
        )
    `);
 
    // A FUN√á√ÉO INIT() RETORNA O OBJETO D E CONEX√ÉO COM O BANCO DE DADOS.
    return db;
}
```
 
#### Juntando as partes

Para que possamos executar a fun√ß√£o do arquivo `src/database.ts` em nosso arquivo `src/main.ts`, precisamos primeiro importa-la, isso √© poss√≠vel ser feito com o seguinte comando `import { init } from "./database";`, por√©m a fun√ß√£o que criamos no arquivo `src/database.ts` √© ass√≠ncrona e portanto para que possamos utilizar a palavra reservada `await` que permite que esperemos o t√©rmino da execu√ß√£o da fun√ß√£o, ser√° necess√°rio que a chamada da fun√ß√£o ass√≠ncrona seja feita dentro de outra fun√ß√£o ass√≠ncrona, que chamaremos de `init`, mesmo nome que utilizamos no arquivo `src/database`, criando assim um conflito de nomes, para que possamos resolver este conflito iremos apelidar a fun√ß√£o `init` importada do arquivo `src/database.ts`, para isso vamos alterar a linha de importa√ß√£o de `import { init } from "./database";` para `import { init as initDatabase } from "./database";`.

Todos os m√©todos que depender√£o do banco de dados ser√£o movidos para dentro da fun√ß√£o `init` que acabamos de criar; Para ficar f√°cil o entendimento do que foi alterado no arquivo `src/main.ts`, as linhas que n√£o necessitam serem movidas foram marcadas com o coment√°rio `// *`, j√° as que necessitam serem movidas para dentro da fun√ß√£o `init`, foram marcadas com o coment√°rio `// **` e as linhas que foram adicionadas foram comentadas com a sua devida explica√ß√£o.
 
_src/main.ts_
```typescript
// IMPORTA A FUN√á√ÉO INIT E A APELIDA DE INITDATABASE DO ARQUIVO `DATABASE.TS`, 
// NOTE QUE A EXTENS√ÉO `.TS` √â OMITIDA AQUI.
import { init as initDatabase } from "./database";

// *
import express from "express";

// *
import bodyParser from "body-parser";

// *
const app = express();

// *
app.use(function (request, response, next) {
    response.header('Access-Control-Allow-Origin', '*');
    response.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
    response.header('Access-Control-Allow-Headers', 'Content-Type');
    next();
});

// *
app.use(bodyParser.json());

// CRIA UMA FUN√á√ÉO ASS√çNCRONA CHAMADA INIT() (N√ÉO CONFUNDIR COM A INIT DO 
// ARQUIVO DATABASE.TS) ESTA FUN√á√ÉO FOI CRIADA PARA QUE POSSAMOS MANIPULAR 
// EXECU√á√ïES ASS√çNCRONAS UTILIZANDO AS PALAVRAS RESERVADAS ASYNC E AWAIT 
// FACILITANDO O ENTENDIMENTO DO C√ìDIGO.
async function init() {
    // AGUARDA A EXECU√á√ÉO DA FUN√á√ÉO `INIT()` DO ARQUIVO `DATABASE.TS` E ARMAZENA 
    // O RETORNO DA FUN√á√ÉO NA CONSTANTE `DB`.
    const db = await initDatabase();

    // **
    app.get('/pessoa', function (request, response) {
        const responseData = {
            teste: "buscar dados de todas as pessoas pessoas"
        };
        response.json(responseData);
    });

    // **
    app.post('/pessoa', function (request, response) {
        const responseData = {
            teste: "adicionar dados de pessoa no banco de dados",
            vindoDoCliente: request.body
        };
        response.json(responseData);
    });

    // **
    app.get('/pessoa/:id', function (request, response) {
        const responseData = {
            id: request.params.id,
            teste: "buscar dados de uma pessoa espec√≠fica"
        };
        response.json(responseData);
    });

    // **
    app.put('/pessoa/:id', function (request, response) {
        const responseData = {
            id: request.params.id,
            teste: "atualiza dados de uma pessoa espec√≠fica",
            vindoDoCliente: request.body
        };
        response.json(responseData);
    });

    // **
    app.delete('/pessoa/:id', function (request, response) {
        const responseData = {
            id: request.params.id,
            teste: "exclui dados de uma pessoa espec√≠fica",
        };
        response.json(responseData);
    });

    // **
    app.listen(8081, () => console.log("running..."));
}

// EXECUTA A FUN√á√ÉO INIT() DESTE ARQUIVO.
init();
```

##### Testando se a conex√£o foi bem sucedida

Execute o comando `npm run debug` no **terminal do VSCode** _ctrl+'_ para iniciar o servidor, caso esteja tudo _ok_ voc√™ ver√° a mensagem `running...` em seu terminal e o arquivo `database.db` aparecer√° na pasta raiz de do projeto, abra este arquivo utilizando o **DB Browser** para verificar se a estrutura da tabela foi criada corretamente, caso queira √© poss√≠vel adicionar, alterar, listar e remover dados direto na tabela utilizando o **DB Browser**.

### Manipula√ß√£o do banco de dados pela API

Estamos chegando na reta final do desenvolvimento da API, o que nos falta fazer √© acrescentar a capacidade para que as rotas executem suas referidas a√ß√µes no banco de dados, os passos a seguir mostram os trechos de c√≥digos que iremos alterar explicando linha-a-linha que ser√° alterado, com isso exemplificando como se d√° o acesso ao banco de dados.

#### Fun√ß√£o de `busca ao banco de dados` para a rota `GET /pessoa` do servidor - `app.get('/pessoa', function (request, response) { ‚Ä¶ }`

```typescript
// DEFINE A ROTA `GET /pessoa`.
app.get('/pessoa', 
    // ADICIONADO A PALAVRA RESERVADA ASYNC ANTES DA DECLARA√á√ÉO DA FUN√á√ÉO QUE √â 
    // EXECUTADA QUANDO ESTA ROTA √â REQUISITADA PELO CLIENTE, SER√Å NECESS√ÅRIO 
    // ESPERAR A RESPOSTA DO BANCO DE DADOS PARA QUE A EXECU√á√ÉO DA FUN√á√ÉO POSSA 
    // PROSSEGUIR, POR ISSO A ADI√á√ÉO DA PALAVRA ASYNC.
    async function (request, response) {
        // EXECUTA O M√âTODO `all` DO OBJETO DE CONEX√ÉO COM BANCO DE DADOS `db` E 
        // SEU VALOR DE RETORNO √â ARMAZENADO NA CONSTANTE `responseData`; ESTE 
        // M√âTODO EXECUTA UMA SELE√á√ÉO NO BANCO DE DADOS E RETORNA UM ARRAY 
        // CONTENDO TODAS AS LINHAS ENCONTRADAS.
        //
        // O PRIMEIRO PAR√ÇMETRO √â UM SQL SELECT GEN√âRICO QUE RETORNAR√Å TODOS OS 
        // ITENS DA TABELA.
        const responseData = await db.all("SELECT * FROM pessoa");
        // RESPONDE A REQUISI√á√ÉO HTTP COMO UM JSON QUE CONT√âM OS VALORES 
        // ENCONTRADOS NO BANCO DE DADOS, NOTE QUE N√ÉO DEFINIMOS O HTTP STATUS 
        // CODE, POR PADR√ÉO O HTTP STATUS CODE √â `200 Ok`.
        response.json(responseData);
    }
);
```
 
#### Fun√ß√£o de `inser√ß√£o ao banco de dados` para a rota `POST /pessoa` do servidor - `app.post('/pessoa', function (request, response) { ‚Ä¶ }`
 
```typescript
// DEFINE A ROTA `POST /pessoa`.
app.post('/pessoa', 
    // ADICIONADO A PALAVRA RESERVADA ASYNC ANTES DA DECLARA√á√ÉO DA FUN√á√ÉO QUE √â 
    // EXECUTADA QUANDO ESTA ROTA √â REQUISITADA PELO CLIENTE, SER√Å NECESS√ÅRIO 
    // ESPERAR A RESPOSTA DO BANCO DE DADOS PARA QUE A EXECU√á√ÉO DA FUN√á√ÉO POSSA 
    // PROSSEGUIR, POR ISSO A ADI√á√ÉO DA PALAVRA ASYNC.
    async function (request, response) {
        // VERIFICA SE NO CORPO DO TEXTO N√ÉO TEM AS CHAVES `nome`, `sobrenome` E 
        // `apelido`.
        if (!request.body.nome || !request.body.sobrenome || !request.body.apelido) {
            // CASO N√ÉO EXISTA UMA DAS CHAVES, O SERVIDOR RETORNA O `HTTP STATUS 
            // CODE`, `422` INFORMANDO QUE A ENTIDADE RECEBIDA N√ÉO PODE SER 
            // PROCESSADA.
            response.status(422); // Unprocessable Entity
            // RETORNA NO CORPO DA RESPOSTA UM OBJETO COM A CHAVE `error` QUE 
            // EXPLICA DE FORMA VERBOSA O ERRO OCORRIDO.
            response.json({ error: "dados incompletos." });
            // PARA A EXECU√á√ÉO DA FUN√á√ÉO NESTE MOMENTO, POIS SEM ESSAS 
            // INFORMA√á√ïES N√ÉO H√Å MOTIVOS DE CONTINUAR A EXECU√á√ÉO.
            return;
        }
 
        // INICIA BLOCO DE TENTATIVA, ISSO SIGNIFICA QUE SE ALGUM DOS COMANDOS 
        // DEFINIDOS DENTRO DELE RETORNAR (throw) A EXECU√á√ÉO DO BLOCO √â 
        // INTERROMPIDO E O FLUXO PASSA PARA O BLOCO`catch` PASSANDO COMO 
        // PAR√ÇMETRO VALOR RETORNADO PELA LINHA QUE APRESENTOU O ERRO.
        try {
            // EXECUTA O M√âTODO `run` DO OBJETO DE CONEX√ÉO COM BANCO DE DADOS 
            // `db` E O RESULTADO DE SUA EXECU√á√ÉO √â ARMAZENADO NA CONSTANTE 
            // `responseData`; ESTE M√âTODO EXECUTA QUALQUER SQL E RETORNA 
            // INFORMA√á√ïES COMO A QUANTIDADE DE LINHAS AFETADAS; 
            //
            // O PRIMEIRO PAR√ÇMETRO √â UM SQL DE INSER√á√ÉO DE DADOS NA TABELA 
            // `pessoa` (note que os valores n√£o foram adicionados, em seu lugar 
            // foram adicionadas √¢ncoras `:` que ser√£o substitu√≠das pelos valores 
            // no momento da execu√ß√£o, permitindo assim que o m√©todo trate 
            // ataques de sql injection) E O SEGUNDO √â UM OBJETO COM OS VALORES 
            // A SEREM SUBSTITU√çDOS PELAS√ÉNCORAS DA STRING SQL DO PRIMEIRO 
            // PAR√ÇMETRO.
            const responseData = await db.run(
                "INSERT INTO pessoa(nome, sobrenome, apelido) VALUES(:nome, :sobrenome, :apelido)",
                {
                    ":nome": request.body.nome,
                    ":sobrenome": request.body.sobrenome,
                    ":apelido": request.body.apelido
                }
            );
            // RETORNA NO CORPO DA RESPOSTA UM OBJETO INFORMA√á√ïES DE QUANTAS
            // LINHAS FORAM AFETADAS, NOTE QUE N√ÉO DEFINIMOS O HTTP STATUS CODE,
            // POR PADR√ÉO O HTTP STATUS CODE √â `200 Ok`.
            response.json(responseData);
        } 
        // CASO UM ERRO ACONTE√áA NO BLOCO TRY, O FLUXO DE EXECU√á√ÉO VEM PARA O
        // BLOCO CATCH RECEBENDO COMO PAR√ÇMETRO O ERRO OCORRIDO
        catch (e) {
            // CASO UM ERRO ACONTE√áA, O SERVIDOR RETORNA O `HTTP STATUS CODE`, 
            // `500` INFORMANDO QUE UM ERRO DE PROGRAMA√á√ÉO OCORREU.
            response.status(500); // Internal Server Error
            // RETORNA NO CORPO DA RESPOSTA UM OBJETO COM A CHAVE `error` QUE 
            // EXPLICA DE FORMA VERBOSA O ERRO OCORRIDO, E TAMB√âM UMA CHAVE 
            // `detail` QUE RETORNA EXATAMENTE O OBJETO DE ERRO RECEBIDO PELO 
            // BLOCO CATCH.
            response.json({ error: "database error", detail: e });
        }
    }
);
```
 
#### Fun√ß√£o de `busca no banco de dados` para a rota `GET /pessoa/:id` do servidor - `app.get('/pessoa/:id', function (request, response) { ‚Ä¶ }`
 
```typescript
// DEFINE A ROTA `GET /pessoa/:id`.
app.get('/pessoa/:id', 
    // ADICIONADO A PALAVRA RESERVADA ASYNC ANTES DA DECLARA√á√ÉO DA FUN√á√ÉO QUE √â 
    // EXECUTADA QUANDO ESTA ROTA √â REQUISITADA PELO CLIENTE, SER√Å NECESS√ÅRIO 
    // ESPERAR A RESPOSTA DO BANCO DE DADOS PARA QUE A EXECU√á√ÉO DA FUN√á√ÉO POSSA 
    // PROSSEGUIR, POR ISSO A ADI√á√ÉO DA PALAVRA ASYNC.
    async function (request, response) {
        // EXECUTA O M√âTODO `get` DO OBJETO DE CONEX√ÉO COM BANCO DE DADOS `db` E 
        // SEU VALOR DE RETORNO √â GUARDADO NA CONSTANTE `responseData`; ESTE 
        // M√âTODO EXECUTA UMA SELE√á√ÉO NO BANCO DE DADOS E RETORNA UM OBJETO 
        // CONTENDO TODOS OS DADOS DE UMA PESSOA.
        //
        // O PRIMEIRO PAR√ÇMETRO √â UM SQL SELECT COM UMA CL√ÅUSULA WHERE QUE 
        // RETORNAR√Å APENAS UM ITEM DA TABELA, O SEGUNDO PAR√ÇMETRO √â O VALOR A 
        // SER SUBSTITU√çDO PELA √ÇNCORA, AQUI FOI OPTADO POR UTILIZAR √ÉNCORAS N√ÉO
        // NOMEADAS `?` AO INV√âS DE √ÉNCORAS NOMEADAS `:` POR TRATAR-SE DE APENAS
        // UM VALOR A SER SUBSTITU√çDO NA STRING SQL DO PRIMEIRO PAR√ÇMETRO.
        const responseData = await db.get("SELECT * FROM pessoa WHERE id=? LIMIT 1", request.params.id);
 
        // VERIFICA SE EXISTE ALGUM VALOR NA CONSTANTE `responseData`, CASO N√ÉO
        // EXISTA √â PORQUE O SELECT N√ÉO ENCONTROU UMA PESSOA COM O `id` INFORMADO.
        if (responseData == undefined) {
            // CASO O SELECT N√ÉO RETORNE VALORES, O SERVIDOR RETORNA O `HTTP 
            // STATUS CODE 404` INFORMANDO QUE N√ÉO FOI ENCONTRADO O DADO 
            // SOLICITADO.
            response.status(404); // Not Found
            // RETORNA NO CORPO DA RESPOSTA UM OBJETO COM A CHAVE `error` QUE 
            // EXPLICA DE FORMA VERBOSA O ERRO OCORRIDO.
            response.json({ error: "Pessoa n√£o encontrada." });
        } 
        
        // CASO CONTR√ÅRIO: QUANDO `responseData` N√ÉO FOR INDEFINIDO (VAZIO).
        else {
            // CASO O SELECT EXECUTADO ENCONTRE ALGUM VALOR, O SERVIDOR RETORNA
            // O OBJETO CONTENDO AS INFORMA√á√ïES DE PESSOA NO FORMATO JSON, NOTE 
            // QUE N√ÉO DEFINIMOS O HTTP STATUS CODE, POR PADR√ÉO O HTTP STATUS 
            // CODE √â `200 Ok`.
            response.json(responseData);
        }
    }
);
```
 
#### Fun√ß√£o de `altera√ß√£o no banco` de dados para a rota `PUT /pessoa/:id` do servidor - `app.put('/pessoa/:id', function (request, response) { ‚Ä¶ }`
 
```typescript
// DEFINE A ROTA `PUT /pessoa/:id`.
app.put('/pessoa/:id', 
    // ADICIONADO A PALAVRA RESERVADA ASYNC ANTES DA DECLARA√á√ÉO DA FUN√á√ÉO QUE √â 
    // EXECUTADA QUANDO ESTA ROTA √â REQUISITADA PELO CLIENTE, SER√Å NECESS√ÅRIO 
    // ESPERAR A RESPOSTA DO BANCO DE DADOS PARA QUE A EXECU√á√ÉO DA FUN√á√ÉO POSSA 
    // PROSSEGUIR, POR ISSO A ADI√á√ÉO DA PALAVRA ASYNC.
    async function (request, response) {
        // VERIFICA SE NO CORPO DO TEXTO N√ÉO TEM AS CHAVES `nome`, `sobrenome` E 
        // `apelido`.
        if (!request.body.nome || !request.body.sobrenome || !request.body.apelido) {
            // CASO N√ÉO EXISTA UMA DAS CHAVES, O SERVIDOR RETORNA O `HTTP STATUS 
            // CODE` `422` QUE INFORMA QUE A ENTIDADE RECEBIDA N√ÉO PODE SER 
            // PROCESSADA.
            response.status(422); // Unprocessable Entity
            // RETORNA NO CORPO DA RESPOSTA UM OBJETO COM A CHAVE `error` QUE 
            // EXPLICA DE FORMA VERBOSA O ERRO OCORRIDO.
            response.json({ error: "dados incompletos." });
            // PARA A EXECU√á√ÉO DA FUN√á√ÉO NESTE MOMENTO, POIS SEM ESSAS 
            // INFORMA√á√ïES N√ÉO H√Å MOTIVOS DE CONTINUAR A EXECU√á√ÉO.
            return;
        }
 
        // INICIA BLOCO DE TENTATIVA, ISSO SIGNIFICA QUE SE ALGUM DOS COMANDOS 
        // DEFINIDOS DENTRO DELE RETORNAR (throw) A EXECU√á√ÉO DO BLOCO √â 
        // INTERROMPIDO E O FLUXO PASSA PARA O BLOCO `catch` PASSANDO COMO 
        // PAR√ÇMETRO VALOR RETORNADO PELA LINHA QUE APRESENTOU O ERRO.
        try {
            // EXECUTA O M√âTODO `run` DO OBJETO DE CONEX√ÉO COM BANCO DE DADOS 
            // `db` E O RESULTADO DE SUA EXECU√á√ÉO √â ARMAZENADO NA CONSTANTE 
            // `responseData`; ESTE M√âTODO EXECUTA QUALQUER SQL E RETORNA 
            // INFORMA√á√ïES COMO A QUANTIDADE DE LINHAS AFETADAS; 
            //
            // O PRIMEIRO PAR√ÇMETRO √â UM SQL DE ATUALIZA√á√ÉO DE DADOS NA TABELA 
            // `pessoa` (note que os valores n√£o foram adicionados, em seu lugar 
            // foram adicionadas √¢ncoras `:` que ser√£o substitu√≠das pelos valores 
            // no momento da execu√ß√£o, permitindo assim que o m√©todo trate 
            // ataques de sql injection) E O SEGUNDO √â UM OBJETO COM OS VALORES 
            // A SEREM SUBSTITU√çDOS PELAS √ÉNCORAS DA STRING SQL DO PRIMEIRO 
            // PAR√ÇMETRO.
            const responseData = await db.run(
                "UPDATE pessoa SET nome=:nome, sobrenome=:sobrenome, apelido=:apelido WHERE id=:id",
                {
                    ":id": request.params.id,
                    ":nome": request.body.nome,
                    ":sobrenome": request.body.sobrenome,
                    ":apelido": request.body.apelido
                }
            );
 
            // VERIFICA SE EXISTE ALGUM VALOR NA CONSTANTE `responseData`, CASO 
            // N√ÉO EXISTA √â PORQUE O SELECT N√ÉO ENCONTROU UMA PESSOA COM O `id` 
            // INFORMADO.
            if (responseData == undefined) {
                // CASO O SELECT N√ÉO RETORNE VALORES, O SERVIDOR RETORNA O `HTTP 
                // STATUS CODE 404` INFORMANDO QUE N√ÉO FOI ENCONTRADO O DADO 
                // SOLICITADO.
                response.status(404); // Not Found
                // RETORNA NO CORPO DA RESPOSTA UM OBJETO COM A CHAVE `error` 
                // QUE EXPLICA DE FORMA VERBOSA O ERRO OCORRIDO.
                response.json({ error: "Pessoa n√£o encontrada." });
            } 
            
            // CASO CONTR√ÅRIO: QUANDO `responseData` N√ÉO FOR INDEFINIDO (VAZIO).
            else {
                // CASO O SELECT EXECUTADO ENCONTRE ALGUM VALOR, O SERVIDOR 
                // RETORNA O OBJETO CONTENDO AS INFORMA√á√ïES DE PESSOA NO FORMATO 
                // JSON, NOTE QUE N√ÉO DEFINIMOS O HTTP STATUS CODE, POR PADR√ÉO O 
                // HTTP STATUS CODE √â `200 Ok`.
                response.json(responseData);
            }
        }
        
        // CASO UM ERRO ACONTE√áA NO BLOCO TRY, O FLUXO DE EXECU√á√ÉO VEM PARA O
        // BLOCO CATCH RECEBENDO COMO PAR√ÇMETRO O ERRO OCORRIDO
        catch (e) {
            // CASO UM ERRO ACONTE√áA, O SERVIDOR RETORNA O `HTTP STATUS CODE`, 
            // `500` INFORMANDO QUE UM ERRO DE PROGRAMA√á√ÉO OCORREU.
            response.status(500); // Internal Server Error
            // RETORNA NO CORPO DA RESPOSTA UM OBJETO COM A CHAVE `error` QUE 
            // EXPLICA DE FORMA VERBOSA O ERRO OCORRIDO, E TAMB√âM UMA CHAVE 
            // `detail` QUE RETORNA EXATAMENTE O OBJETO DE ERRO RECEBIDO PELO 
            // BLOCO CATCH.
            response.json({ error: "database error", detail: e });
    }
);
```
 
#### Fun√ß√£o de `exclus√£o no banco de dados` para a rota `DELETE /pessoa/:id` do servidor -  `app.delete('/pessoa/:id', function (request, response) { ‚Ä¶ }`
 
```typescript
// DEFINE A ROTA `PUT /pessoa/:id`.
app.delete('/pessoa/:id', 
    // ADICIONADO A PALAVRA RESERVADA ASYNC ANTES DA DECLARA√á√ÉO DA FUN√á√ÉO QUE √â 
    // EXECUTADA QUANDO ESTA ROTA √â REQUISITADA PELO CLIENTE, SER√Å NECESS√ÅRIO 
    // ESPERAR A RESPOSTA DO BANCO DE DADOS PARA QUE A EXECU√á√ÉO DA FUN√á√ÉO POSSA 
    // PROSSEGUIR, POR ISSO A ADI√á√ÉO DA PALAVRA ASYNC.
    async function (request, response) {
        // EXECUTA O M√âTODO `run` DO OBJETO DE CONEX√ÉO COM BANCO DE DADOS `db` E 
        // O RESULTADO DE SUA EXECU√á√ÉO √â ARMAZENADO NA CONSTANTE `responseData`; 
        // ESTE M√âTODO EXECUTA QUALQUER SQL E RETORNA INFORMA√á√ïES COMO A 
        // QUANTIDADE DE LINHAS AFETADAS; 
        //
        // O PRIMEIRO PAR√ÇMETRO √â UM SQL SELECT COM UMA CL√ÅUSULA WHERE QUE 
        // FOR√áA A BUSCA DE DADOS DE PESSOA POR ID, FAZENDO COM QUE APENAS UM 
        // ITEM DA TABELA SEJA RETORNADO, O SEGUNDO PAR√ÇMETRO √â O VALOR A 
        // SER SUBSTITU√çDO PELA √ÇNCORA, AQUI FOI OPTADO POR UTILIZAR √ÉNCORAS N√ÉO
        // NOMEADAS `?` AO INV√âS DE ANCORAS NOMEADAS `:` POR TRATAR-SE DE APENAS
        // UM VALOR A SER SUBSTITU√çDO NA STRING SQL DO PRIMEIRO PAR√ÇMETRO.
        const responseData = await db.run("DELETE FROM pessoa WHERE id=? LIMIT 1", request.params.id);
 
        // VERIFICA A QUANTIDADE DE LINHAS AFETADAS PELO DELETE, CASO O VALOR 
        // SEJA 0 SIGNIFICA QUE NADA FOI EXCLU√çDO
        if(responseData.changes == 0) {
            // CASO O DELETE ALTERE NENHUMA LINHA, O SERVIDOR RETORNA O `HTTP 
            // STATUS CODE 404` INFORMANDO QUE N√ÉO FOI ENCONTRADO O DADO 
            // SOLICITADO.
            response.status(404); // Not Found
            // RETORNA NO CORPO DA RESPOSTA UM OBJETO COM A CHAVE `error` QUE 
            // EXPLICA DE FORMA VERBOSA O ERRO OCORRIDO.
            response.json({ error: "Pessoa n√£o encontrada." });
        } 
        
        // CASO CONTR√ÅRIO: QUANDO O N√öMERO DE LINHAS AFETADAS FOR MAIOR QUE 0.
        else {
            // CASO O DELETE ALTERE MAIS QUE 0 LINHAS, O SERVIDOR RETORNA O 
            // OBJETO CONTENDO INFORMA√á√ïES COMO O N√öMERO DE LINHAS AFETADAS, 
            // NOTE QUE POR PADR√ÉO O HTTP STATUS CODE √â `200 Ok`, POR ISSO N√ÉO 
            // FOI PRECISO ALTERAR O HTTP STATUS CODE.
            response.json(responseData);
        }
    }
);
```

#### Resultado final

‚Ä¶

```typescript
import { init as initDatabase } from "./database";
import express from "express";
import bodyParser from "body-parser";

const app = express();

app.use(function (request, response, next) {
    response.header('Access-Control-Allow-Origin', '*');
    response.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
    response.header('Access-Control-Allow-Headers', 'Content-Type');
    next();
});

app.use(bodyParser.json());

async function init() {
    const db = await initDatabase();

    app.get('/pessoa', async function (request, response) {
        const responseData = await db.all("SELECT * FROM pessoa")
        response.json(responseData);
    });

    app.post('/pessoa', async function (request, response) {
        if (!request.body.nome || !request.body.sobrenome || !request.body.apelido) {
            response.status(422); // Unprocessable Entity
            response.json({ error: "dados incompletos." });
            return;
        }

        try {
            const responseData = await db.run(
                "INSERT INTO pessoa(nome, sobrenome, apelido) VALUES(:nome, :sobrenome, :apelido)",
                {
                    ":nome": request.body.nome,
                    ":sobrenome": request.body.sobrenome,
                    ":apelido": request.body.apelido
                }
            );
            response.json(responseData);
        } catch (e) {
            response.status(500); // Internal Server Error
            response.json({ error: "Erro de Banco de Dados.", detail: e });
        }
    });

    app.get('/pessoa/:id', async function (request, response) {
        const responseData = await db.get("SELECT * FROM pessoa WHERE id=?", request.params.id);
        if (responseData == undefined) {
            response.status(404); // Not Found
            response.json({ error: "Pessoa n√£o encontrada." });
        } else {
            response.json(responseData);
        }
    });

    app.put('/pessoa/:id', async function (request, response) {
        if (!request.body.nome || !request.body.sobrenome || !request.body.apelido) {
            response.status(422); // Unprocessable Entity
            response.json({ error: "dados incompletos." });
            return;
        }

        try {
            const responseData = await db.run(
                "UPDATE pessoa SET nome=:nome, sobrenome=:sobrenome, apelido=:apelido WHERE id=:id",
                {
                    ":id": request.params.id,
                    ":nome": request.body.nome,
                    ":sobrenome": request.body.sobrenome,
                    ":apelido": request.body.apelido
                }
            );

            if(responseData.changes == 0) {
                response.status(404);
                response.json({ error: "pessoa n√£o encontrada" });
            } else {
                response.json(responseData);
            }
        } catch (e) {
            response.status(500); // Internal Server Error
            response.json({ error: "Erro de Banco de Dados.", detail: e });
        }
    });

    app.delete('/pessoa/:id', async function (request, response) {
        const responseData = await db.run("DELETE FROM pessoa WHERE id=?", request.params.id);
        if(responseData.changes == 0) {
            response.status(404);
            response.json({ error: "pessoa n√£o encontrada" });
        } else {
            response.json(responseData);
        }
    });

    app.listen(8081, () => console.log("running..."));
}

init();
```

### Teste final

‚Ä¶

## 2. Cliente - Browser/Navegador

‚Ä¶
